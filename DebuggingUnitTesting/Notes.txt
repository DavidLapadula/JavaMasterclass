- Timing different in debug mode - threading issues hard to debug
- Much more processing when running to allow for debugging to occur
- Debugging
	- Communicates to application with socket
	- Breakpoint: stop execution and examine state. Applicaation suspends when it hits that line
		- Line of code has not been executed, suspend before line of code executes
		- Will show value of parameters in method
		- Frames - show stack trace for method call. Also show threads and their state
			- When change to it will show value of relevant variables. If one value is class, can expand to see its internal values
	- Step over: advance execution by 1 statement and do not show values at that point of execution (Do not care what is happening in method)
	- Step into: go into method and see state of execution in method. Step out to run method, return to caller, and suspend
	- Drop frame: rewind application to previous state of execution (static variable change, traffic, db change cant be rewound)
	- Use 'Run to cursor' to prevent many breakpoints 
	- Run through application instead of just closing, and can use Run > View breakpoints to see all BP's 
- Watchers: updated as application runs
	- Can add variable to watchers to make updates visible as application progresses (blue whenever it changes value)
- Field Watch Point: locate code that changes a variable, whenever some code accesses that variable code will break and show
	- Watch can be set to access or modification, and can also remove once hit to break once it has been accessed
- Smart Step into: which method to step into (Run > Smart Step into)
- Set variable values on the fly. Right click and 'Set Value' to test based on value without restarting
- Junit
	- 